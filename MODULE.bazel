bazel_dep(name = "aspect_bazel_lib", version = "2.5.0")
bazel_dep(name = "aspect_rules_js", version = "1.37.0")
bazel_dep(name = "aspect_rules_ts", version = "2.3.0")
bazel_dep(name = "rules_nodejs", version = "6.1.0")
bazel_dep(name = "rules_oci", version = "1.6.0")

single_version_override(module_name = "rules_oci", patches = ["//third_party/rules_oci:no_xattr.patch"], patch_strip = 1)

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "16.14.2")

use_repo(node, "nodejs_toolchains")

register_toolchains(
    "@nodejs_toolchains//:linux_arm64_toolchain_target",
    "@nodejs_toolchains//:linux_arm64_toolchain",
)

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    lifecycle_hooks = { },
    npmrc = ".npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    public_hoist_packages = { },
    npm_package_target_name = "{dirname}",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)

# Must be kept in sync with package.json
rules_ts_ext.deps(
    # Integrity hash as provided from:
    # curl --silent https://registry.npmjs.org/typescript/5.3.2 | jq -r '.dist.integrity'
    #
    # More Info: https://docs.aspect.build/rules/aspect_rules_ts/docs/repositories/#ts_integrity
    ts_integrity = "sha512-vcI4UpRgg81oIRUFwR0WSIHKt11nJ7SAVlYNIu+QpqeyXP+gpQJy/Z4+F0aGxSE4MqwjyXvW/TzgkLAx2AGHwQ",
    ts_version = "5.4.5",
)
use_repo(rules_ts_ext, "npm_typescript")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

oci.pull(
    name = "debian",
    digest = "sha256:3d868b5eb908155f3784317b3dda2941df87bbbbaa4608f84881de66d9bb297b",
    image = "debian",
    platforms = [
        "linux/386",
        "linux/amd64",
        "linux/arm/v5",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/mips64le",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
use_repo(oci, "debian")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

_SYSROOT_LINUX_BUILD_FILE = """
filegroup(
    name = "sysroot",
    srcs = glob(["*/**"]),
    visibility = ["//visibility:public"],
)
"""

_SYSROOT_DARWIN_BUILD_FILE = """
filegroup(
    name = "sysroot",
    srcs = glob(
        include = ["**"],
        exclude = ["**/*:*"],
    ),
    visibility = ["//visibility:public"],
)
"""

http_archive(
    name = "org_chromium_sysroot_linux_arm64",
    build_file_content = _SYSROOT_LINUX_BUILD_FILE,
    sha256 = "cf2fefded0449f06d3cf634bfa94ffed60dbe47f2a14d2900b00eb9bcfb104b8",
    urls = ["https://commondatastorage.googleapis.com/chrome-linux-sysroot/toolchain/80fc74e431f37f590d0c85f16a9d8709088929e8/debian_bullseye_arm64_sysroot.tar.xz"],
)

http_archive(
    name = "org_chromium_sysroot_linux_x86_64",
    build_file_content = _SYSROOT_LINUX_BUILD_FILE,
    sha256 = "04b94ba1098b71f8543cb0ba6c36a6ea2890d4d417b04a08b907d96b38a48574",
    urls = ["https://commondatastorage.googleapis.com/chrome-linux-sysroot/toolchain/f5f68713249b52b35db9e08f67184cac392369ab/debian_bullseye_amd64_sysroot.tar.xz"],
)

http_archive(
    name = "sysroot_darwin_universal",
    build_file_content = _SYSROOT_DARWIN_BUILD_FILE,
    # The ruby header has an infinite symlink that we need to remove.
    patch_cmds = ["rm System/Library/Frameworks/Ruby.framework/Versions/Current/Headers/ruby/ruby"],
    sha256 = "71ae00a90be7a8c382179014969cec30d50e6e627570af283fbe52132958daaf",
    strip_prefix = "MacOSX11.3.sdk",
    urls = ["https://s3.us-east-2.amazonaws.com/static.aspect.build/sysroots/MacOSX11.3.sdk.tar.xz"],
)

bazel_dep(name = "toolchains_llvm", version = "1.0.0")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
   llvm_version = "16.0.0",
)

llvm.sysroot(
    targets = ["linux-aarch64"],
    label = "@org_chromium_sysroot_linux_arm64//:sysroot",
)

llvm.sysroot(
    targets = ["linux-x86_64"],
    label = "@org_chromium_sysroot_linux_x86_64//:sysroot",
)

llvm.sysroot(
    targets = ["darwin-aarch64", "darwin-x86_64"],
    label = "@sysroot_darwin_universal//:sysroot",
)

use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")
